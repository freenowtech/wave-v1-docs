{"version":3,"file":"src-essentials-Colors-docs-Colors-storybook-mdx.0d547dd0.iframe.bundle.js","mappings":";;AAiCA;;ACEA;AACA;;;;;;;;;AASA;AAGA;ACpCA;AACA;;;;;AAKA;;;;AAIA;;;AAGA;AAGA;ACbA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;;;AAGA;AAGA;;;;;;ACTA;;;AAGA;AA0BA;;;AApBA;;;;;AAKA;;;;;AAKA;;;AAGA;AASA;;AAKA;;;AAGA;AAEA;AC1CA;AACA;;;AAKA","sources":["webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/components/Table/components/Table.tsx","webpack://@freenow/wave/./src/components/Table/components/TableCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableHeaderCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableRow.tsx","webpack://@freenow/wave/./src/essentials/Colors/docs/SemanticColorsTable.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import React, { ComponentPropsWithoutRef, FC } from 'react';\nimport styled, { StyledComponent } from 'styled-components';\nimport { compose, height, HeightProps, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { getColumnSpace } from '../util/getColumnSpace';\nimport { getRowSize } from '../util/getRowSize';\n\ninterface TableElementProps\n    extends MarginProps,\n        HeightProps,\n        WidthProps,\n        // do not include width property from the `<table>` tag type because styled-system provides its own\n        Omit<ComponentPropsWithoutRef<'table'>, 'width'> {}\n\ninterface TableProps extends TableElementProps {\n    /**\n     * Row style (background colors, borders, etc.)\n     * @default lines\n     */\n    rowStyle: 'lines' | 'zebra' | 'blank';\n    /**\n     * The height of the table rows. More info on [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n     */\n    rowSize?: 'large' | 'normal' | 'small' | string;\n    /**\n     * The space between columns of the table (any CSS value will be divided by 2 using `calc`)\n     */\n    columnSpace?: 'normal' | 'small' | string;\n}\n\nconst TableElement: StyledComponent<FC<TableElementProps>, typeof theme> = styled.table.attrs({\n    theme\n})<TableElementProps>`\n    font-size: ${get('fontSizes.1')};\n    font-family: ${get('fonts.normal')};\n    border-collapse: collapse;\n    border-spacing: 0;\n    box-sizing: border-box;\n\n    thead tr:hover {\n        background-color: inherit;\n    }\n\n    ${compose(margin, width, height)}\n`;\n\nconst Table: FC<TableProps> = ({\n    children,\n    rowStyle,\n    rowSize = 'normal',\n    columnSpace = 'normal',\n    ...props\n}: TableProps) => {\n    const context = {\n        columnSpace: getColumnSpace(columnSpace),\n        rowSize: getRowSize(rowSize),\n        rowStyle\n    };\n\n    return (\n        <TableElement {...props}>\n            <TableContext.Provider value={context}>{children}</TableContext.Provider>\n        </TableElement>\n    );\n};\n\nexport { Table, TableElement, TableProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'td'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableCellElement = styled.td<TableCellProps>`\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableCell: FC<TableCellProps> = (props: TableCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableCell, TableCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { Colors } from '../../../essentials';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableHeaderCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'th'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableHeaderCellElement = styled.th.attrs({ theme })<TableHeaderCellProps>`\n    border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_550} !important;\n    font-weight: ${get('fontWeights.bold')};\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    text-align: left;\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableHeaderCell: FC<TableHeaderCellProps> = (props: TableHeaderCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableHeaderCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableHeaderCell, TableHeaderCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableRowProps = ComponentPropsWithoutRef<'tr'> & {\n    /**\n     * Show active state styling on the row\n     * @default false\n     */\n    active?: boolean;\n    /**\n     * Show the hover state styling on the row\n     * @default true\n     */\n    hover?: boolean;\n};\n\nconst zebraStyles = (active, hover) => css`\n    &:nth-child(even) {\n        background-color: rgb(249, 250, 251);\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${Colors.ACTION_BLUE_100}` : ''};\n    }\n\n    ${active ? `background-color: ${Colors.ACTION_BLUE_150} !important` : ''};\n`;\n\nconst linesStyles = (active, hover) => css`\n    td,\n    th {\n        border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    }\n\n    &:first-of-type {\n        th {\n            border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_550};\n        }\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${Colors.ACTION_BLUE_50};` : ''}\n    }\n\n    ${active ? `background-color: ${Colors.ACTION_BLUE_100} !important` : ''};\n`;\n\nconst TableRowElement = styled.tr<TableRowProps & Pick<TableProps, 'rowStyle'>>(\n    ({ rowStyle, active, hover = true }) => {\n        switch (rowStyle) {\n            case 'zebra':\n                return zebraStyles(active, hover);\n            case 'lines':\n                return linesStyles(active, hover);\n            case 'blank':\n            default:\n                return css`\n                    &:hover {\n                        ${hover ? `background-color: ${Colors.ACTION_BLUE_50}` : ''};\n                    }\n\n                    ${active ? `background-color: ${Colors.ACTION_BLUE_100} !important` : ''};\n                `;\n        }\n    }\n);\n\nconst TableRow: FC<TableRowProps> = (props: TableRowProps) => {\n    const { rowStyle } = useContext(TableContext);\n\n    return <TableRowElement rowStyle={rowStyle} {...props} />;\n};\n\nexport { TableRow, TableRowProps };\n","import React, { FC, useState } from 'react';\nimport styled from 'styled-components';\nimport { Box, Input, Table, TableCell, TableHeaderCell, TableRow } from '../../../components';\nimport { Colors, SemanticColors } from '../Colors';\n\nfunction flattenObj(\n    obj: Record<string, unknown>,\n    parent?: string,\n    result: Map<string, string> = new Map()\n): Map<string, string> {\n    Object.keys(obj).forEach(key => {\n        const propName = parent ? `${parent}.${key}` : key;\n\n        if (typeof obj[key] === 'object') {\n            flattenObj(obj[key] as Record<string, unknown>, propName, result);\n        } else {\n            result.set(propName, obj[key] as string);\n        }\n    });\n\n    return result;\n}\n\nconst ColorBlock = styled.div<{ color: string }>`\n    background-color: ${p => p.color};\n    border: 0.0625rem solid ${p => (p.color === Colors.WHITE ? Colors.AUTHENTIC_BLUE_200 : p.color)};\n    height: 1.5rem;\n    width: 4rem;\n`;\n\nconst flatSemanticColors = flattenObj(SemanticColors);\nconst flatSemanticColorsKeys = [...flatSemanticColors.keys()] as string[];\n\nexport const SemanticColorsTable: FC = () => {\n    const [nameSearchInput, setNameSearchInput] = useState('');\n\n    const filteredColorKeys = !nameSearchInput\n        ? flatSemanticColorsKeys\n        : flatSemanticColorsKeys.filter(it => it.toLowerCase().includes(nameSearchInput.toLowerCase().trim()));\n\n    return (\n        <>\n            <Table rowStyle=\"lines\" width=\"100%\" rowSize=\"small\">\n                <thead>\n                    <TableRow>\n                        <TableHeaderCell>Color</TableHeaderCell>\n                        <TableHeaderCell>\n                            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                Name\n                                <Input\n                                    placeholder=\"Filter\"\n                                    size=\"small\"\n                                    value={nameSearchInput}\n                                    onChange={e => setNameSearchInput(e.target.value)}\n                                />\n                            </Box>\n                        </TableHeaderCell>\n                        <TableHeaderCell>Hex Code</TableHeaderCell>\n                    </TableRow>\n                </thead>\n                <tbody>\n                    {filteredColorKeys.map(key => (\n                        <TableRow key={key}>\n                            <TableCell>\n                                <ColorBlock color={flatSemanticColors.get(key)} />\n                            </TableCell>\n                            <TableCell>\n                                <code>{key}</code>\n                            </TableCell>\n                            <TableCell>\n                                <code>{flatSemanticColors.get(key)}</code>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </tbody>\n            </Table>\n        </>\n    );\n};\n"],"names":[],"sourceRoot":""}