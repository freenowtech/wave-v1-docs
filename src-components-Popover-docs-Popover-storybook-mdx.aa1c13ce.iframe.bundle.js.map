{"version":3,"file":"src-components-Popover-docs-Popover-storybook-mdx.aa1c13ce.iframe.bundle.js","mappings":";;;AAqBA;AAGA;;;ACDA;AAGA;;;;;AAKA;AACA;AACA;;;;AAIA;;AAIA;;AAIA;;;;;;AAMA;;;;;;AAQA;;;ACFA;;;;AAIA;AACA;;;;AArBA;;;;;;;;;;AAmCA;;;;ACuEA;AAGA;;;ACjGA;AACA;AACA;;AAEA;;;ACzCA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Popover/PopoverContent.tsx","webpack://@freenow/wave/./src/components/Popover/Popover.tsx","webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Card/Card.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Spaces } from '../../essentials';\nimport { Card } from '../Card/Card';\n\nconst DEFAULT_PADDING = Spaces[2];\n\ninterface PopoverContentProps {\n    /**\n     * Popover content (can be any valid React Element or component)\n     */\n    children: React.ReactNode;\n    /**\n     * Popover content padding\n     */\n    padding: string | number;\n}\n\nconst PopoverContentContainer = styled(Card)<{ padding: string | number }>`\n    display: block;\n    padding: ${props => props.padding};\n`;\n\nexport const PopoverContent = ({ padding = DEFAULT_PADDING, children }: PopoverContentProps): React.ReactElement => (\n    <>\n        <PopoverContentContainer padding={padding} level={200}>\n            {children}\n        </PopoverContentContainer>\n    </>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Placement } from '@popperjs/core/lib/enums';\nimport { usePopper } from 'react-popper';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { Colors, Spaces } from '../../essentials';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../icons/index';\nimport { useClickOutside } from '../../utils/hooks/useClickOutside';\n\nimport { Text } from '../Text/Text';\n\nimport { PopoverContent } from './PopoverContent';\n\ninterface PopoverRefObjectProps {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: any;\n}\n\nconst PopoverTrigger = styled.div.attrs({ theme })<PopoverRefObjectProps>`\n    display: inline-block;\n    width: fit-content;\n    border-radius: ${get('radii.2')};\n`;\n\nconst DefaultPopoverWrapper = styled.div.attrs({ theme })`\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid ${get('semanticColors.button.secondary.borderHover')};\n    padding: 0.8125rem ${Spaces[2]};\n    border-radius: ${get('radii.2')};\n\n    &:hover {\n        cursor: pointer;\n        background-color: ${get('semanticColors.background.secondary')} !important;\n    }\n`;\n\nconst PopoverContentContainer = styled.div<PopoverRefObjectProps>`\n    display: inline-block;\n`;\n\nconst PopoverContentWrapper = styled.div`\n    display: inline-block;\n    box-sizing: border-box;\n    width: auto;\n    height: auto;\n    z-index: 1000;\n    box-shadow: ${get('shadows.small')};\n    max-height: none;\n\n    &:focus {\n        outline: 0;\n    }\n`;\n\nconst KEY_CODE_MAP = {\n    ENTER: 13,\n    SPACE: 32,\n    ESC: 27\n};\n\ninterface PopoverProps {\n    /**\n     * Popover Trigger (Only use Text, Link, Button or Icon component from @wave as a trigger)\n     */\n    children: React.ReactNode;\n    /**\n     * Popover content (can be any valid React Element or component containing React Elements)\n     */\n    content: React.ReactNode;\n    /**\n     * Popover content padding\n     */\n    padding?: string | number;\n    /**\n     * Optional: Specify the Popover content placement (it changes automatically if the Popover content cannot fit inside the viewport with the selected placement)\n     */\n    placement?: Placement;\n    /**\n     * Optional: Specify the Popover content offset (margin between Popover trigger and content)\n     */\n    offset?: number;\n    /**\n     * Optional: Render popover content open by default\n     */\n    isOpen?: boolean;\n    /**\n     * Optional: Define a callback for when Popover content is opened\n     */\n    onOpen?: () => void;\n    /**\n     * Optional: Define a callback for when Popover content is closed\n     */\n    onClose?: () => void;\n}\n\nconst Popover: React.FC<PopoverProps> = ({\n    children,\n    content = '',\n    padding = undefined,\n    placement = 'bottom-start',\n    offset = 5,\n    isOpen = false,\n    onOpen,\n    onClose\n}: PopoverProps) => {\n    const [triggerReference, setTriggerReference] = React.useState(undefined);\n    const [contentReference, setContentReference] = React.useState(undefined);\n    const popoverTriggerRef = React.useRef<HTMLDivElement>(null);\n    const popoverContentRef = React.useRef<HTMLDivElement>(null);\n\n    const [openByDefault, setOpenByDefault] = React.useState(isOpen);\n\n    const [render, setRender] = React.useState(openByDefault);\n\n    const { styles, attributes } = usePopper(triggerReference, contentReference, {\n        placement,\n        strategy: 'fixed',\n        modifiers: [\n            {\n                name: 'offset',\n                enabled: !!offset,\n                options: {\n                    offset: [0, offset]\n                }\n            },\n            {\n                name: 'flip',\n                enabled: true\n            }\n        ]\n    });\n\n    const resolveCallback = React.useCallback(\n        state => {\n            if (onClose && !state) onClose();\n            if (onOpen && state) onOpen();\n        },\n        [onClose, onOpen]\n    );\n\n    const hidePopover: () => void = React.useCallback(() => {\n        if (openByDefault) {\n            setOpenByDefault(false);\n        } else {\n            setRender(false);\n        }\n        resolveCallback(false);\n    }, [openByDefault, resolveCallback]);\n\n    const handleClose = React.useCallback(() => {\n        if (render) {\n            hidePopover();\n        }\n    }, [render, hidePopover]);\n\n    const handleClick: () => void = React.useCallback(() => {\n        if (render) {\n            hidePopover();\n        } else {\n            setRender(true);\n            resolveCallback(true);\n        }\n    }, [resolveCallback, setRender, render, hidePopover]);\n\n    const handleOut = React.useCallback(\n        ev => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (popoverTriggerRef && popoverTriggerRef.current && !popoverTriggerRef.current.contains(ev.target)) {\n                if (!openByDefault) {\n                    handleClose();\n                } else {\n                    setOpenByDefault(false);\n                    resolveCallback(false);\n                }\n            }\n        },\n        [openByDefault, popoverTriggerRef, handleClose, resolveCallback]\n    );\n\n    const handleKeyControl = (ev: React.KeyboardEvent<HTMLElement>) => {\n        // eslint-disable-next-line default-case\n        switch (ev.keyCode) {\n            case KEY_CODE_MAP.ESC:\n                handleClose();\n                break;\n            case KEY_CODE_MAP.ENTER:\n                handleClick();\n                break;\n            case KEY_CODE_MAP.SPACE:\n                handleClick();\n        }\n    };\n\n    React.useEffect(() => {\n        setRender(openByDefault);\n    }, [openByDefault, setRender]);\n\n    useClickOutside(popoverContentRef, ev => handleOut(ev));\n\n    return (\n        <>\n            <PopoverTrigger\n                ref={setTriggerReference}\n                onClick={handleClick}\n                tabIndex={0}\n                aria-describedby=\"popover-content\"\n                aria-haspopup\n                onKeyDown={ev => handleKeyControl(ev)}\n            >\n                {typeof children === 'string' ? (\n                    <DefaultPopoverWrapper\n                        ref={popoverTriggerRef}\n                        style={{ background: render ? Colors.AUTHENTIC_BLUE_50 : 'none' }}\n                    >\n                        <Text fontWeight=\"semibold\">{children}</Text>\n                        {!render ? (\n                            <ChevronDownIcon size={20} style={{ marginLeft: Spaces[1] }} />\n                        ) : (\n                            <ChevronUpIcon size={20} style={{ marginLeft: Spaces[1] }} />\n                        )}\n                    </DefaultPopoverWrapper>\n                ) : (\n                    <div ref={popoverTriggerRef}>{children}</div>\n                )}\n            </PopoverTrigger>\n\n            {render && (\n                <PopoverContentContainer\n                    id=\"popover-content\"\n                    ref={setContentReference}\n                    style={{ ...styles.popper, zIndex: 999 }}\n                    {...attributes.popper}\n                >\n                    <PopoverContentWrapper ref={popoverContentRef}>\n                        <PopoverContent padding={padding}>{content}</PopoverContent>\n                    </PopoverContentWrapper>\n                </PopoverContentContainer>\n            )}\n        </>\n    );\n};\n\nexport { Popover, PopoverProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the button width to 100% of the parent\n     * @deprecated\n     */\n    block?: boolean;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n/**\n * @deprecated\n */\nfunction handleBlockProp({ block }: BaseButtonProps): string {\n    if (block !== undefined) {\n        deprecatedProperty('Button', block, 'block', 'width');\n    }\n\n    if (block) {\n        return 'width: 100%';\n    }\n\n    return '';\n}\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n    ${handleBlockProp};\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import styled, { StyledComponent } from 'styled-components';\nimport {\n    borderRadius,\n    BorderRadiusProps,\n    compose,\n    height,\n    HeightProps,\n    padding,\n    PaddingProps,\n    ResponsiveValue,\n    space,\n    SpaceProps,\n    variant,\n    width,\n    WidthProps\n} from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ntype CardProps = BorderRadiusProps &\n    HeightProps &\n    SpaceProps &\n    WidthProps &\n    PaddingProps & {\n        /**\n         * Set the visual depth of the card by adding a shadow (available values: 0, 100, 200, 300)\n         * @default 0\n         */\n        level?: ResponsiveValue<0 | 100 | 200 | 300>;\n    };\n\nconst levelVariant = variant({\n    prop: 'level',\n    variants: {\n        0: {\n            boxShadow: 'none'\n        },\n        100: {\n            boxShadow: theme.shadows.small\n        },\n        200: {\n            boxShadow: theme.shadows.medium\n        },\n        300: {\n            boxShadow: theme.shadows.large\n        }\n    }\n});\n\nconst Card: StyledComponent<'div', typeof theme, CardProps, 'theme'> = styled.div.attrs({ theme })`\n    overflow: auto;\n    box-sizing: border-box;\n    background-color: ${Colors.WHITE};\n    border-radius: ${get('radii.1')};\n    padding: ${get('space.5')};\n\n    ${compose(levelVariant, borderRadius, height, space, width, padding)}\n`;\n\nexport { Card, CardProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.ACTION_BLUE_900)};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${p => (p.inverted ? Colors.WHITE : Colors.ACTION_BLUE_900)};\n    }\n\n    &:hover,\n    &:active {\n        color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_350 : Colors.ACTION_BLUE_1000)};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}