{"version":3,"file":"src-components-Checkbox-docs-Checkbox-storybook-mdx.76ee01fd.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAoBA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;;;;;;;;;;AAWA;AACA;;;;;AAKA;AACA;;;AAGA;;;;AAIA;;;;;;;ACnEA;;;;;;;AAOA;;;;;;;ACuDA;;AAEA;;;;AA5CA;;;AAKA;;;AAKA;;;AAIA;AACA;;;AAGA;AACA;;AAIA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;AAmBA;;;;;;;;ACtCA;AAGA;ACKA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Checkbox/components/Checkmark.tsx","webpack://@freenow/wave/./src/components/Checkbox/components/TapArea.tsx","webpack://@freenow/wave/./src/components/Checkbox/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/Checkbox/Checkbox.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\ninterface CheckmarkProps {\n    error?: boolean;\n}\n\nconst Checkmark = styled.input<CheckmarkProps>`\n    appearance: none;\n    outline-offset: 0.25rem;\n    border: none;\n\n    position: relative;\n\n    width: 1rem;\n    height: 1rem;\n    padding: 0;\n    margin: 0;\n\n    background-color: ${Colors.WHITE};\n\n    box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.AUTHENTIC_BLUE_200)};\n    border-radius: ${get('radii.2')};\n    transition: background-color 100ms, box-shadow 100ms;\n    cursor: pointer;\n\n    vertical-align: text-bottom;\n\n    &::after {\n        content: ' ';\n\n        background-image: url(\"data:image/svg+xml,%3Csvg width='16' height='16' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cdefs%3E%3Cpath d='M3.711 8.037a1.051 1.051 0 0 1 1.485-.063l1.411 1.297 4.113-4.806a1.051 1.051 0 1 1 1.597 1.367l-4.63 5.41a1.333 1.333 0 0 1-1.916.116L3.774 9.522a1.051 1.051 0 0 1-.063-1.485z' id='a'/%3E%3C/defs%3E%3Cuse fill='%23FFF' fill-rule='nonzero' xlink:href='%23a'/%3E%3C/svg%3E\");\n        background-repeat: no-repeat;\n        background-size: cover;\n        width: 1rem;\n        height: 1rem;\n\n        position: absolute;\n        top: 50%;\n        left: 45%;\n\n        opacity: 0;\n        visibility: hidden;\n        transform: translate(-45%, -40%) scale(0.2);\n        transition: visibility 175ms, opacity 150ms, scale 175ms, transform 175ms;\n    }\n\n    &:checked {\n        background-color: ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n        box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n\n        &::after {\n            opacity: 1;\n            visibility: visible;\n            transform: translate(-45%, -50%) scale(1);\n        }\n    }\n\n    &:indeterminate {\n        background-image: url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='10' height='2' x='3' y='7' rx='1' fill='%23FFF' fill-rule='nonzero'/%3E%3C/svg%3E%0A\");\n        background-color: ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n        box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n        box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n\n        &:hover {\n            box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n        }\n\n        &:active {\n            background-color: ${Colors.AUTHENTIC_BLUE_50};\n        }\n    }\n`;\n\nexport { Checkmark };\n","import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\nconst TapArea = styled.div`\n    position: absolute;\n    width: 1.75rem;\n    height: 1.75rem;\n    border-radius: ${get('radii.3')};\n    background-color: transparent;\n    top: -0.375rem;\n    left: -0.375rem;\n    transition: background-color 125ms;\n\n    &:active {\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n    }\n`;\n\nexport { TapArea };\n","import styled, { css } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\nimport { TapArea } from './TapArea';\nimport { Checkmark } from './Checkmark';\nimport { theme } from '../../../essentials/theme';\n\ntype LabelWrapperProps = MarginProps & {\n    disabled?: boolean;\n    error?: boolean;\n    indeterminate?: boolean;\n    textVerticalAlign?: ResponsiveValue<'top' | 'center'>;\n};\n\nconst textVerticalAlignVariant = variant({\n    prop: 'textVerticalAlign',\n    variants: {\n        top: {\n            alignItems: 'flex-start'\n        },\n        center: {\n            alignItems: 'center'\n        }\n    }\n});\n\nconst hoverStyle = ({ disabled, error, indeterminate }: LabelWrapperProps) => {\n    if (disabled) {\n        return css`\n            cursor: not-allowed;\n\n            & > ${/* sc-selector */ TapArea}:active {\n                background-color: transparent;\n            }\n        `;\n    }\n    if (indeterminate) {\n        return css`\n            cursor: pointer;\n\n            & ${/* sc-selector */ TapArea}:not(:active) {\n                background-color: ${error ? Colors.NEGATIVE_ORANGE_50 : Colors.ACTION_BLUE_50};\n            }\n\n            & ${/* sc-selector */ Checkmark}:not(:checked) {\n                box-shadow: inset 0 0 0 0.125rem ${error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900};\n            }\n        `;\n    }\n    return css`\n        cursor: pointer;\n\n        & ${/* sc-selector */ TapArea}:not(:active) {\n            background-color: ${error ? Colors.NEGATIVE_ORANGE_50 : Colors.ACTION_BLUE_50};\n        }\n\n        & ${/* sc-selector */ Checkmark}:not(:checked) {\n            box-shadow: inset 0 0 0 0.125rem ${error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900};\n            background-color: ${Colors.WHITE};\n        }\n    `;\n};\n\nconst LabelWrapper = styled.label.attrs({ theme })<LabelWrapperProps>`\n    display: inline-flex;\n    position: relative;\n    user-select: none;\n\n    color: ${props => (props.disabled ? Colors.AUTHENTIC_BLUE_350 : Colors.AUTHENTIC_BLUE_900)};\n\n    font-family: ${get('fonts.normal')};\n    line-height: 1;\n\n    &:hover {\n        ${hoverStyle}\n    }\n\n    ${compose(margin, textVerticalAlignVariant)}\n`;\n\nexport { LabelWrapper };\n","import React, { ComponentPropsWithoutRef, FC, ReactNode, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { MarginProps, ResponsiveValue } from 'styled-system';\n\nimport { ClassNameProps, extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\n\nimport { Checkmark } from './components/Checkmark';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { TapArea } from './components/TapArea';\n\ninterface CheckboxProps extends Omit<ComponentPropsWithoutRef<'input'>, 'size'>, ClassNameProps, MarginProps {\n    /**\n     * Provide a label for the input which will be shown next to the checkbox\n     */\n    label?: ReactNode;\n    /**\n     * Add styles to show the checkbox has errors\n     */\n    error?: boolean;\n    /**\n     * Align label text relatively to the checkbox\n     */\n    textVerticalAlign?: ResponsiveValue<'top' | 'center'>;\n    /**\n     * Define size of the checkbox component, defaults to large\n     */\n    size?: ResponsiveValue<'small' | 'medium' | 'large'>;\n    /**\n     * Decides whether the checkbox is in an \"indeterminate\"(partially selected) state\n     */\n    indeterminate?: boolean;\n}\n\nconst WithTapAreaWrapper = styled.div<Pick<CheckboxProps, 'textVerticalAlign'>>`\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n\n    height: 1rem;\n    margin: 0 0.5rem 0 0;\n    ${({ textVerticalAlign }) => (textVerticalAlign === 'top' ? 'margin-top: 0.1875rem' : undefined)}\n`;\n\nconst Checkbox: FC<CheckboxProps> = props => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n\n    const { disabled, error, label, textVerticalAlign, size, indeterminate, ...rest } = restProps;\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = (\n            <Text onClick={e => e.stopPropagation()} disabled={disabled} fontSize={size}>\n                {label}\n            </Text>\n        );\n    }\n\n    const checkboxRef = React.createRef<HTMLInputElement>();\n\n    useEffect(() => {\n        /**\n         * this hook exists to support the \"indeterminate\" state for the checkbox, which\n         * currently can be set only using javascript (non HTML)\n         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate\n         */\n        checkboxRef.current.indeterminate = !!indeterminate;\n    }, [indeterminate]);\n\n    return (\n        <LabelWrapper\n            indeterminate={indeterminate}\n            disabled={disabled}\n            error={error}\n            textVerticalAlign={textVerticalAlign}\n            {...marginProps}\n            {...classNameProps}\n        >\n            <WithTapAreaWrapper textVerticalAlign={textVerticalAlign}>\n                <TapArea />\n                <Checkmark ref={checkboxRef} type=\"checkbox\" disabled={disabled} error={error} {...rest} />\n            </WithTapAreaWrapper>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nCheckbox.defaultProps = {\n    textVerticalAlign: 'center',\n    // TODO: size defaults to \"large\" when theme fontSizes aliases are fixed\n    size: 'medium'\n};\n\nexport { Checkbox, CheckboxProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}