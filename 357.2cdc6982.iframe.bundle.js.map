{"version":3,"file":"357.2cdc6982.iframe.bundle.js","mappings":";;;AAcA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;AAGA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;AAyDA;AACA;;;;;AAKA;;AAlHA;;AAsHA;;AAEA;AAGA;;;AC1EA;;;;AAIA;AACA;;;;AArBA;;;;;;;;;;AAmCA;;;;ACuEA;AAGA;ACrGA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Banner/Banner.tsx","webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { ReactNode, useState, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { variant } from 'styled-system';\nimport { Elevation, SemanticColors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nexport const ANIMATION_DURATION = 140;\nconst TRANSITION_KEY = 'banner-animation';\n\nconst fallDown = css`\n    top: 0;\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translateY(-100%);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translateY(-100%);\n    }\n`;\n\nconst riseUp = css`\n    bottom: 0;\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translateY(100%);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translateY(100%);\n    }\n`;\n\nconst bannerVariants = variant({\n    variants: {\n        info: {\n            backgroundColor: SemanticColors.background.secondaryEmphasized\n        },\n        success: {\n            backgroundColor: SemanticColors.background.successEmphasized\n        },\n        danger: {\n            backgroundColor: SemanticColors.background.dangerEmphasized\n        }\n    }\n});\n\ntype DismissFunc = () => void;\n\ninterface BannerProps {\n    /**\n     * Set banner position\n     */\n    position?: 'top' | 'bottom';\n    /**\n     * Set the appropriate background color, screen position, and animation.\n     * @default info\n     */\n    variant?: 'info' | 'success' | 'danger';\n    /**\n     * A function child can be used instead of a React element. This function is\n     * called a function to dismiss the banner, which can be used to trigger the\n     * animation and unmount the component afterwards.\n     * ```jsx\n     *    <Banner>\n     *        {dismiss => (\n     *            <button onClick={() => dismiss()} />\n     *        )}\n     *    </Transition>\n     * ```\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n    /**\n     * A function that will be called after the user has dismissed the banner and\n     * the banner has disappeared.\n     */\n    onClose?: () => void;\n}\n\nconst getBannerPosition = (props: BannerProps) => {\n    if (props.position) {\n        return props.position === 'top' ? fallDown : riseUp;\n    }\n\n    return props.variant === 'danger' ? fallDown : riseUp;\n};\n\nconst AnimatedBanner = styled.div.attrs({ theme })<BannerProps>`\n    overflow: auto;\n    box-sizing: border-box;\n    padding: ${get('space.3')};\n    background-color: ${SemanticColors.background.secondaryEmphasized};\n\n    position: fixed;\n    left: 0;\n    width: 100%;\n    z-index: ${Elevation.BANNER};\n\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION * 0.75}ms ease;\n\n    ${props => getBannerPosition(props)}\n\n    ${bannerVariants}\n`;\n\nconst DismissContext = React.createContext<DismissFunc>(() => {});\n\nconst useBannerDismiss: () => DismissFunc = () => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useBannerDismiss must be used within a <Banner />');\n    }\n\n    return dismiss;\n};\n\nconst Banner: React.FC<BannerProps> = ({ children, onClose, ...rest }: BannerProps) => {\n    const [visible, setVisible] = useState(true);\n\n    const dismissFunction = () => {\n        setVisible(false);\n        if (onClose) {\n            setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(dismissFunction) as ReactNode;\n        }\n\n        return children;\n    };\n\n    return (\n        <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n            <AnimatedBanner {...rest}>\n                <DismissContext.Provider value={dismissFunction}>{renderChildren()}</DismissContext.Provider>\n            </AnimatedBanner>\n        </CSSTransition>\n    );\n};\n\nexport { Banner, BannerProps, useBannerDismiss, DismissFunc };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the button width to 100% of the parent\n     * @deprecated\n     */\n    block?: boolean;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n/**\n * @deprecated\n */\nfunction handleBlockProp({ block }: BaseButtonProps): string {\n    if (block !== undefined) {\n        deprecatedProperty('Button', block, 'block', 'width');\n    }\n\n    if (block) {\n        return 'width: 100%';\n    }\n\n    return '';\n}\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n    ${handleBlockProp};\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}