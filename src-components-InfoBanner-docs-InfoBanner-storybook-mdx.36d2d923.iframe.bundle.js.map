{"version":3,"file":"src-components-InfoBanner-docs-InfoBanner-storybook-mdx.36d2d923.iframe.bundle.js","mappings":";;AAiCA;;AC4BA;AACA;AACA;;;AAGA;AACA;;;;;ACmEA;;AAEA;AACA;;AAEA;AAIA;AAIA;AAMA;AACA;AAGA;;ACzIA;;AAIA;;;;;;;;;;AAkBA","sources":["webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/InfoBanner/InfoBanner.tsx","webpack://@freenow/wave/./src/components/InfoBanner/blocks/InfoBannerCard.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nexport const DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variant as styledVariant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport { theme } from '../../essentials/theme';\nimport {\n    CheckCircleSolidIcon,\n    CloseCircleSolidIcon,\n    InfoCircleSolidIcon,\n    WarningSolidIcon,\n    IconProps\n} from '../../icons';\nimport { BoxProps, Box } from '../Box/Box';\nimport { Link } from '../Link/Link';\nimport { Text } from '../Text/Text';\nimport { Headline } from '../Headline/Headline';\nimport { Spaces } from '../../essentials';\n\ninterface InfoBannerProps extends BoxProps {\n    /**\n     * The title of the banner\n     */\n    title: string;\n    /**\n     * The description of the banner\n     */\n    description: string;\n    /**\n     * Color and message type for the component\n     * @default info\n     */\n    variant?: InfoBannerVariants;\n    /**\n     * Adds additional emphasis or highlights critical status of the message\n     * @default false\n     */\n    emphasized?: boolean;\n    /**\n     * Sets the text of the link contained in the banner\n     */\n    linkText?: string;\n    /**\n     * Sets the url where the user will be redirected when clicking on the link\n     */\n    linkUrl?: string;\n}\n\ntype InfoBannerVariants = 'info' | 'success' | 'warning' | 'error';\n\ninterface BoxWithVariant extends BoxProps {\n    variant: InfoBannerVariants;\n    emphasized: boolean;\n}\n\nconst bannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: get('semanticColors.background.info'),\n            borderColor: get('semanticColors.border.info')\n        },\n        success: {\n            background: get('semanticColors.background.success'),\n            borderColor: get('semanticColors.border.success')\n        },\n        warning: {\n            background: get('semanticColors.background.warning'),\n            borderColor: get('semanticColors.border.warning')\n        },\n        error: {\n            background: get('semanticColors.background.danger'),\n            borderColor: get('semanticColors.border.danger')\n        }\n    }\n});\n\nconst emphasizedBannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: get('semanticColors.background.infoEmphasized'),\n            borderColor: get('semanticColors.border.infoEmphasized')\n        },\n        success: {\n            background: get('semanticColors.background.successEmphasized'),\n            borderColor: get('semanticColors.border.successEmphasized')\n        },\n        warning: {\n            background: get('semanticColors.background.warningEmphasized'),\n            borderColor: get('semanticColors.border.warningEmphasized')\n        },\n        error: {\n            background: get('semanticColors.background.dangerEmphasized'),\n            borderColor: get('semanticColors.border.dangerEmphasized')\n        }\n    }\n});\n\nconst iconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: get('semanticColors.icon.action')\n        },\n        success: {\n            color: get('semanticColors.icon.success')\n        },\n        warning: {\n            color: get('semanticColors.icon.primary')\n        },\n        error: {\n            color: get('semanticColors.icon.danger')\n        }\n    }\n});\n\nconst emphasizedIconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: get('semanticColors.icon.primaryInverted')\n        },\n        success: {\n            color: get('semanticColors.icon.primaryInverted')\n        },\n        warning: {\n            color: get('semanticColors.icon.primary')\n        },\n        error: {\n            color: get('semanticColors.icon.primaryInverted')\n        }\n    }\n});\n\nexport const RoundedBox = styled(Box).attrs({ theme })<BoxWithVariant>`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    border-radius: ${get('radii.3')};\n    border: 0.0625rem solid;\n    padding: ${Spaces[2]};\n    ${({ emphasized }) => (emphasized ? emphasizedBannerVariants : bannerVariants)};\n\n    --info-banner-text-color: ${({ emphasized, variant }) =>\n        emphasized && variant !== 'warning'\n            ? get('semanticColors.text.primaryInverted')\n            : get('semanticColors.text.primary')};\n    --info-banner-link-color: ${({ emphasized, variant }) =>\n        emphasized && variant !== 'warning'\n            ? get('semanticColors.text.primaryInverted')\n            : get('semanticColors.text.link')};\n    --info-banner-link-hover-color: ${({ emphasized, variant }) =>\n        emphasized && variant !== 'warning'\n            ? get('semanticColors.text.tertiary')\n            : get('semanticColors.text.linkHover')};\n`;\n\nexport const IconBox = styled(Box)<BoxWithVariant>`\n    ${({ emphasized }) => (emphasized ? emphasizedIconColorVariants : iconColorVariants)};\n`;\n\nexport const ICON_VARIANTS: {\n    [key in InfoBannerVariants]: React.FC<IconProps>;\n} = {\n    warning: WarningSolidIcon,\n    info: InfoCircleSolidIcon,\n    success: CheckCircleSolidIcon,\n    error: CloseCircleSolidIcon\n};\n\nexport const ROLE_VARIANTS: {\n    [key in InfoBannerVariants]: string;\n} = {\n    error: 'alert',\n    info: 'status',\n    success: 'alert',\n    warning: 'status'\n};\n\nconst InfoBanner = ({\n    title,\n    description,\n    variant = 'info',\n    linkText,\n    linkUrl,\n    emphasized,\n    ...props\n}: InfoBannerProps): JSX.Element => {\n    const BannerIcon = ICON_VARIANTS[variant];\n    const isInverted = emphasized && variant !== 'warning';\n\n    return (\n        <RoundedBox variant={variant} emphasized={emphasized} role={ROLE_VARIANTS[variant]} {...props}>\n            <IconBox mr={1} variant={variant} emphasized={emphasized} data-testid=\"infobanner-icon-container\">\n                <BannerIcon size={20} color=\"inherit\" />\n            </IconBox>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Headline as=\"h4\" textAlign=\"left\" inverted={isInverted}>\n                    {title}\n                </Headline>\n                <Text fontSize=\"small\" textAlign=\"left\" inverted={isInverted}>\n                    {description}\n                </Text>\n                {linkText && linkUrl && (\n                    <Link\n                        fontSize=\"0\"\n                        textAlign=\"left\"\n                        href={linkUrl}\n                        target=\"_blank\"\n                        mt=\"0.25rem\"\n                        inverted={isInverted}\n                    >\n                        {linkText}\n                    </Link>\n                )}\n            </Box>\n        </RoundedBox>\n    );\n};\n\nexport { InfoBanner, InfoBannerProps, InfoBannerVariants };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { BoxProps, Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Link as WaveLink } from '../../Link/Link';\nimport { Text } from '../../Text/Text';\n\nimport { ICON_VARIANTS, IconBox, InfoBannerVariants, ROLE_VARIANTS, RoundedBox } from '../InfoBanner';\n\ninterface CardProps extends BoxProps {\n    children: ReactNode;\n    variant?: InfoBannerVariants;\n    emphasized?: boolean;\n}\n\nconst StyledTitle = styled(Headline).attrs(props => ({ as: 'h4', textAlign: 'left', ...props }))`\n    color: var(--info-banner-text-color);\n`;\n\nconst StyledDescription = styled(Text).attrs(props => ({ fontSize: 'small', textAlign: 'left', ...props }))`\n    color: var(--info-banner-text-color);\n`;\n\nconst StyledLink = styled(WaveLink).attrs(props => ({\n    fontSize: 0,\n    textAlign: 'left',\n    target: '_blank',\n    marginTop: '0.25rem',\n    ...props\n}))`\n    &:link,\n    &:visited {\n        color: var(--info-banner-link-color);\n    }\n\n    &:hover,\n    &:active {\n        color: var(--info-banner-link-hover-color);\n    }\n`;\n\nconst Title = ({ children }: { children: string }) => <StyledTitle>{children}</StyledTitle>;\n\nconst Description = ({ children }: { children: string }) => <StyledDescription>{children}</StyledDescription>;\n\nconst InfoBannerCard = ({ children, variant = 'info', emphasized, ...props }: CardProps): JSX.Element => {\n    const BannerIcon = ICON_VARIANTS[variant];\n\n    return (\n        <RoundedBox variant={variant} emphasized={emphasized} role={ROLE_VARIANTS[variant]} {...props}>\n            <IconBox mr={1} variant={variant} emphasized={emphasized}>\n                <BannerIcon size={20} color=\"inherit\" />\n            </IconBox>\n            <Box display=\"flex\" flexDirection=\"column\">\n                {children}\n            </Box>\n        </RoundedBox>\n    );\n};\n\nInfoBannerCard.Title = Title;\nInfoBannerCard.Description = Description;\nInfoBannerCard.Link = StyledLink;\n\nexport { InfoBannerCard };\n"],"names":[],"sourceRoot":""}