{"version":3,"file":"components-Toggle-docs-Toggle-stories.2ea6c632.iframe.bundle.js","mappings":";;;;;AAyBA;AACA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;AApCA;;;;;;;;;ACWA;;;;AAIA;;;;;;ACRA;;;AAGA;;ACoCA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Toggle/Slide.tsx","webpack://@freenow/wave/./src/components/Toggle/Input.tsx","webpack://@freenow/wave/./src/components/Toggle/Label.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { SemanticColors } from '../../essentials';\n\nconst determineBackground = (props: SlideProps) => {\n    if (props.disabled) {\n        return SemanticColors.background.secondary;\n    }\n\n    if (props.error) {\n        return SemanticColors.background.dangerEmphasized;\n    }\n\n    return SemanticColors.background.infoEmphasized;\n};\n\ninterface SlideProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\n// TODO use SemanticColors.forms once https://github.com/freenowtech/wave/issues/286 is done\nconst Slide = styled.div<SlideProps>`\n    width: 2.25rem;\n    height: 1rem;\n\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    background: ${props => (props.disabled ? SemanticColors.background.secondary : SemanticColors.border.primary)};\n    display: inline-block;\n    border-radius: 0.5rem;\n    position: relative;\n    margin-right: 0.5rem;\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: -0.125rem;\n        left: 0;\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${props =>\n            props.disabled ? SemanticColors.background.secondary : SemanticColors.background.primary};\n        border-radius: 50%;\n        box-shadow: 0 0 0.0625rem 0 rgba(0, 0, 0, 0.05), 0 0.0625rem 0.1875rem 0 rgba(0, 0, 0, 0.4);\n        transform: translateX(0);\n        transition: transform 200ms;\n    }\n\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 0.5rem;\n        width: 1rem;\n        height: 1rem;\n        background-color: ${determineBackground};\n        transition: width 200ms;\n    }\n`;\n\nexport { Slide };\n","import styled from 'styled-components';\nimport { Slide } from './Slide';\n\ninterface InputProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Input = styled.input<InputProps>`\n    height: 0;\n    width: 0;\n    margin: 0;\n    visibility: hidden;\n\n    &:checked + ${/* sc-selector */ Slide}::before {\n        transform: translateX(calc(100% - 0.25rem));\n    }\n\n    &:checked + ${/* sc-selector */ Slide}::after {\n        width: 2.25rem;\n    }\n`;\n\nexport { Input };\n","import styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\ninterface LabelProps extends MarginProps {\n    disabled?: boolean;\n}\n\nconst Label = styled.label<LabelProps>`\n    display: flex;\n    align-items: center;\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    user-select: none;\n\n    ${margin}\n`;\n\nexport { Label };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}