{"version":3,"file":"86609.8d1bed48.iframe.bundle.js","mappings":";AAQA;;;;;;;;ACSA;;;;;;;;ACEA;ACkDA;AAGA;;;;ACnDA;AACA;AACA;;;AAGA;AACA;AACA;;;AClBA;;AAEA;;;;;;;ACHA;;;;;AAOA","sources":["webpack://@freenow/wave/./src/components/PhoneInput/components/DynamicWidthMenu.tsx","webpack://@freenow/wave/./src/components/PhoneInput/components/Option.tsx","webpack://@freenow/wave/./src/components/PhoneInput/components/SingleValue.tsx","webpack://@freenow/wave/./src/components/PhoneInput/PhoneInput.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Label.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Wrapper.tsx","webpack://@freenow/wave/./src/icons/Flag.tsx"],"sourcesContent":["import { components } from 'react-select';\nimport styled from 'styled-components';\n\ninterface DynamicWidthMenuProps {\n    width?: number;\n}\n\nconst DynamicWidthMenu = styled(components.Menu)<DynamicWidthMenuProps>`\n    ${props => (props.width ? `width: ${props.width}px !important;` : undefined)}\n`;\n\nexport { DynamicWidthMenu };\n","import React, { FC } from 'react';\nimport { components, OptionProps } from 'react-select';\nimport styled from 'styled-components';\nimport { Flag } from '../../../icons';\nimport { PhoneAreaCodeCountry } from '../types/PhoneAreaCodeCountry';\nimport { isFlagAvailable } from '../util/isFlagAvailable';\n\nconst OptionWithFlag = styled(components.Option).attrs({ role: 'option' })`\n    display: inline-flex !important;\n\n    svg {\n        min-width: 1.5rem;\n        margin-right: 0.75rem;\n    }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Option: FC<OptionProps<any>> = (props: OptionProps<PhoneAreaCodeCountry>) => {\n    const { data } = props;\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        <OptionWithFlag {...props}>\n            <Flag code={isFlagAvailable(data.value) ? data.value : 'WW'} />\n            {data.label}\n        </OptionWithFlag>\n    );\n};\n\nexport { Option };\n","import React, { FC, ReactElement } from 'react';\nimport { components, SingleValueProps } from 'react-select';\nimport styled from 'styled-components';\nimport { Flag } from '../../../icons';\nimport { Text } from '../../Text/Text';\nimport { PhoneAreaCodeCountry } from '../types/PhoneAreaCodeCountry';\nimport { isFlagAvailable } from '../util/isFlagAvailable';\n\nconst StyledSingleValue = styled(components.SingleValue)`\n    display: inline-flex;\n\n    svg {\n        min-width: 1.5rem;\n        margin-right: 0.5rem;\n    }\n    max-width: 100%;\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst SingleValue: FC<SingleValueProps<any>> = (props: SingleValueProps<PhoneAreaCodeCountry>) => {\n    if (!props.hasValue) {\n        return props.children as ReactElement;\n    }\n\n    const selectedOption: PhoneAreaCodeCountry = props.getValue()[0];\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        <StyledSingleValue {...props}>\n            <Flag code={isFlagAvailable(selectedOption.value) ? selectedOption.value : 'WW'} />\n            <Text>{selectedOption.dialCode}</Text>\n        </StyledSingleValue>\n    );\n};\n\nexport { SingleValue };\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    layout,\n    LayoutProps,\n    margin as marginFn,\n    MarginProps,\n    width as widthFn,\n    WidthProps\n} from 'styled-system';\nimport { extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Input } from '../Input/Input';\nimport { InputProps } from '../Input/InputProps';\nimport { SelectList } from '../SelectList/SelectList';\nimport { SelectListProps } from '../SelectList/types';\nimport { DynamicWidthMenu } from './components/DynamicWidthMenu';\nimport { Option } from './components/Option';\nimport { SingleValue } from './components/SingleValue';\nimport { COUNTRIES } from './constants';\nimport { PhoneAreaCodeCountry } from './types/PhoneAreaCodeCountry';\n\ninterface PhoneInputProps\n    extends WidthProps,\n        MarginProps,\n        Pick<InputProps, 'name' | 'label' | 'placeholder' | 'error' | 'disabled'> {\n    /**\n     * Sets the variant of the phone input element\n     */\n    variant?: 'boxed' | 'bottom-lined';\n    /**\n     * Sets the size of the phone input element\n     */\n    size?: 'small' | 'medium';\n    /**\n     * Sets the ID for the phone input element\n     */\n    id?: string;\n    /**\n     * National number text value\n     */\n    text?: string;\n    /**\n     * Change handler for national number text input\n     */\n    onTextChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Country object for determining the area code\n     */\n    country?: PhoneAreaCodeCountry;\n    /**\n     * Change handler for the area code country\n     */\n    onCountryChange?: (country?: PhoneAreaCodeCountry) => void;\n    /**\n     * HTML element which will be used as a parent for the prefix list\n     */\n    listPortalTarget?: SelectListProps['menuPortalTarget'];\n    /**\n     * Pass props directly to the internal input component. Any value from the `Input` component props are allowed, but props from the `PhoneInput` take precedence\n     */\n    inputProps?: InputProps;\n    /**\n     * Pass props directly to the internal SelectList component used to show prefixes. Any value from the `SelectList` component props are allowed, but props from the `PhoneInput` take precedence\n     */\n    selectListProps?: SelectListProps;\n}\n\nconst Box = styled.div<LayoutProps & WidthProps>`\n    ${compose(layout, widthFn, marginFn)}\n`;\n\nconst PhoneInput: React.FC<PhoneInputProps> = ({\n    width,\n    variant = 'boxed',\n    inputProps = {},\n    selectListProps = {},\n    ...props\n}: PhoneInputProps) => {\n    const { marginProps } = extractWrapperMarginProps(props);\n\n    const nationalNumberInputRef = React.createRef<HTMLDivElement>();\n    const containerRef = React.createRef<HTMLDivElement>();\n    const spaceBetweenInputs = variant === 'boxed' ? '0.25rem' : '0.75rem';\n\n    const handleCountrySelection = value => {\n        if (props.onCountryChange) {\n            props.onCountryChange(value);\n        }\n\n        (nationalNumberInputRef.current.children[0] as HTMLInputElement).focus();\n    };\n\n    return (\n        <Box display=\"inline-flex\" width={width} {...marginProps} ref={containerRef}>\n            <SelectList\n                {...selectListProps}\n                id={`${props.id}-area-code`}\n                name={`${props.name}-area-code`}\n                value={props.country}\n                onChange={handleCountrySelection}\n                options={COUNTRIES.map(it => ({ ...it, label: `${it.label} ${it.dialCode}` }))}\n                placeholder=\"\"\n                width=\"8rem\"\n                components={{\n                    SingleValue,\n                    // eslint-disable-next-line unicorn/no-null\n                    IndicatorSeparator: () => null,\n                    Option,\n                    // DynamicWidthMenu is a styled-component with its own `theme` prop since menuProps has `theme` prop\n                    // from emotion and conflicts in TS\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    Menu: menuProps => <DynamicWidthMenu {...menuProps} width={containerRef.current?.offsetWidth} />\n                }}\n                variant={variant}\n                size={props.size}\n                isDisabled={props.disabled}\n                menuPortalTarget={props.listPortalTarget}\n            />\n            <Input\n                {...inputProps}\n                id={`${props.id}-national-number`}\n                name={`${props.name}-national-number`}\n                ml={spaceBetweenInputs}\n                ref={nationalNumberInputRef}\n                value={props.text}\n                label={props.label}\n                placeholder={props.placeholder}\n                onChange={props.onTextChange}\n                autoComplete=\"tel-national\"\n                variant={variant}\n                size={props.size}\n                error={props.error}\n                disabled={props.disabled}\n                width={`calc(100% - 8rem + ${spaceBetweenInputs})`}\n            />\n        </Box>\n    );\n};\n\nexport { PhoneInput, PhoneInputProps };\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\nimport { variantStyles, errorStyles, disabledStyles } from '../styles';\nimport { Variant, Size } from '../types';\n\ninterface LabelProps {\n    inverted?: boolean;\n    error?: boolean;\n    isDisabled?: boolean;\n    size: Size;\n    variant: Variant;\n    children: ReactNode;\n}\n\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    background: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_900 : Colors.WHITE)};\n    color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550)};\n    transition: color 125ms ease;\n\n    ${p => p.error && errorStyles.label()}\n    ${({ isDisabled, inverted }) => isDisabled && disabledStyles.label({ inverted })}\n    ${({ variant, size }) => variantStyles.label({ variant, size })}\n`;\n","import styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\n\nimport { ClassNameProps } from '../../../utils/extractProps';\nimport { get } from '../../../utils/themeGet';\n\ntype WrapperProps = ClassNameProps & MarginProps & WidthProps;\n\nexport const Wrapper = styled.div<WrapperProps>`\n    position: relative;\n    font-family: ${get('fonts.normal')};\n\n    ${compose(margin, width)}\n\n    &,\n    & * {\n        box-sizing: border-box;\n    }\n`;\n","import React, { Suspense } from 'react';\nimport styled from 'styled-components';\n\nimport { isSSR } from '../utils/isSSR';\nimport { Colors } from '../essentials';\nimport { FlagErrorBoundary } from './FlagErrorBoundary';\nimport { FlagProps } from './FlagProps';\n\nconst Loading = styled.div`\n    background-color: ${Colors.AUTHENTIC_BLUE_50};\n    border-radius: 0.125rem;\n    display: inline-block;\n    height: 1.25rem;\n    width: 1.75rem;\n`;\n\nconst Flag: React.FC<FlagProps> = React.memo(({ code, className }) => {\n    const Component = React.lazy(() => import(`./flags/${code}`));\n\n    return (\n        <FlagErrorBoundary className={className} code={code}>\n            {!isSSR() && (\n                <Suspense fallback={<Loading className={className} />}>\n                    <Component className={className} />\n                </Suspense>\n            )}\n        </FlagErrorBoundary>\n    );\n});\n\nexport { Flag, FlagProps };\n"],"names":[],"sourceRoot":""}