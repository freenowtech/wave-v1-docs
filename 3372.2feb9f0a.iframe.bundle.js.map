{"version":3,"file":"3372.2feb9f0a.iframe.bundle.js","mappings":";AAiCA;;;ACpBA;;;;AAMA;;AAEA;AACA;;;;;;;;;AASA;;;;AAIA;;;AAKA;AACA;AAsEA;;;;AC1FA;AACA;AACA;;;AAGA;AACA;AACA;;;AClBA;;AAEA;;;;;;;ACqCA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/components/Pagination/Pagination.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Label.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Wrapper.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../../essentials/Colors/Colors';\nimport { Spaces } from '../../essentials/Spaces/Spaces';\nimport { BackwardIcon, BackwardLastIcon, ForwardIcon, ForwardLastIcon } from '../../icons';\nimport { Box } from '../Box/Box';\nimport { SelectList } from '../SelectList/SelectList';\n\nconst Container = styled.div`\n    text-align: center;\n`;\n\nconst ButtonsContainer = styled(Box)`\n    display: flex;\n    justify-content: center;\n    position: relative;\n`;\n\nconst IconButton = styled.button`\n    align-items: center;\n    background-color: ${Colors.WHITE};\n    border: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    border-radius: 0.25rem;\n    display: inline-flex;\n    height: 2.5rem;\n    justify-content: center;\n    padding: 0;\n    width: 2.5rem;\n\n    &:not(:last-child) {\n        margin-right: ${Spaces[1]};\n    }\n\n    &:hover:not(:disabled) {\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n        cursor: pointer;\n    }\n`;\n\nconst LabelContainer = styled.div`\n    margin-top: ${Spaces[2]};\n`;\n\ninterface PaginationProps {\n    /**\n     * Define the size of the component, defaults to normal.\n     */\n    size?: 'normal' | 'small';\n    /**\n     * Value of the current page. The first page is assumed to be 1.\n     */\n    value: number;\n    /**\n     * Number of items per page.\n     */\n    pageSize: number;\n    /**\n     * Allow the user to select between the given page sizes.\n     */\n    pageSizes?: { label: string; value: string }[];\n    /**\n     * Total number of items.\n     */\n    totalItems: number;\n    /**\n     * Label to display current page and total pages.\n     */\n    label?: ReactNode;\n    /**\n     * Aria label for the skip backward button.\n     */\n    ariaLabelFirst?: string;\n    /**\n     * Aria label for the previous button.\n     */\n    ariaLabelPrevious?: string;\n    /**\n     * Aria label for the next button.\n     */\n    ariaLabelNext?: string;\n    /**\n     * Aria label for the skip forward button.\n     */\n    ariaLabelLast?: string;\n    /**\n     * Aria label for the container of the page size `SelectList`.\n     */\n    ariaLabelSelectPageSizeContainer?: string;\n    /**\n     * Callback when the next button was pressed.\n     */\n    onNextPage?: () => void;\n    /**\n     * Callback when the previous button was pressed.\n     */\n    onPrevPage?: () => void;\n    /**\n     * Callback when a different page size was selected. Can only be used when `pageSizes` is passed.\n     */\n    onSelectPageSize?: (selected: { label: string; value: string }) => void;\n    /**\n     * Callback when the skip forward button was pressed.\n     */\n    onSkipForward?: () => void;\n    /**\n     * Callback when the skip backward button was pressed.\n     */\n    onSkipBackward?: () => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n    size = 'normal',\n    value,\n    pageSize,\n    pageSizes = [],\n    totalItems,\n    label,\n    ariaLabelFirst = 'First',\n    ariaLabelPrevious = 'Previous',\n    ariaLabelNext = 'Next',\n    ariaLabelLast = 'Last',\n    ariaLabelSelectPageSizeContainer = 'Select page size container',\n    onNextPage,\n    onPrevPage,\n    onSelectPageSize,\n    onSkipForward,\n    onSkipBackward\n}: PaginationProps) => {\n    const isFirstPage = value === 1;\n    const isLastPage = totalItems > 0 ? value === Math.ceil(totalItems / pageSize) : true;\n    const hasMultiplePageSizes = pageSizes.length > 0;\n\n    return (\n        <Container>\n            <ButtonsContainer>\n                {hasMultiplePageSizes && (\n                    <Box aria-label={ariaLabelSelectPageSizeContainer} position=\"absolute\" left=\"0\" width=\"4.5em\">\n                        <SelectList\n                            options={pageSizes}\n                            onChange={onSelectPageSize}\n                            value={pageSizes.find(sizeOption => sizeOption.value === pageSize.toString())}\n                        />\n                    </Box>\n                )}\n                {size !== 'small' && (\n                    <IconButton aria-label={ariaLabelFirst} disabled={isFirstPage} onClick={onSkipBackward}>\n                        <BackwardLastIcon\n                            size=\"small\"\n                            color={isFirstPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                        />\n                    </IconButton>\n                )}\n\n                <IconButton aria-label={ariaLabelPrevious} disabled={isFirstPage} onClick={onPrevPage}>\n                    <BackwardIcon\n                        size=\"small\"\n                        color={isFirstPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                    />\n                </IconButton>\n\n                <IconButton aria-label={ariaLabelNext} disabled={isLastPage} onClick={onNextPage}>\n                    <ForwardIcon\n                        size=\"small\"\n                        color={isLastPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                    />\n                </IconButton>\n\n                {size !== 'small' && (\n                    <IconButton aria-label={ariaLabelLast} disabled={isLastPage} onClick={onSkipForward}>\n                        <ForwardLastIcon\n                            size=\"small\"\n                            color={isLastPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                        />\n                    </IconButton>\n                )}\n            </ButtonsContainer>\n\n            {label && <LabelContainer>{label}</LabelContainer>}\n        </Container>\n    );\n};\n\nexport { Pagination, PaginationProps };\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\nimport { variantStyles, errorStyles, disabledStyles } from '../styles';\nimport { Variant, Size } from '../types';\n\ninterface LabelProps {\n    inverted?: boolean;\n    error?: boolean;\n    isDisabled?: boolean;\n    size: Size;\n    variant: Variant;\n    children: ReactNode;\n}\n\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    background: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_900 : Colors.WHITE)};\n    color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550)};\n    transition: color 125ms ease;\n\n    ${p => p.error && errorStyles.label()}\n    ${({ isDisabled, inverted }) => isDisabled && disabledStyles.label({ inverted })}\n    ${({ variant, size }) => variantStyles.label({ variant, size })}\n`;\n","import styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\n\nimport { ClassNameProps } from '../../../utils/extractProps';\nimport { get } from '../../../utils/themeGet';\n\ntype WrapperProps = ClassNameProps & MarginProps & WidthProps;\n\nexport const Wrapper = styled.div<WrapperProps>`\n    position: relative;\n    font-family: ${get('fonts.normal')};\n\n    ${compose(margin, width)}\n\n    &,\n    & * {\n        box-sizing: border-box;\n    }\n`;\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}