{"version":3,"file":"9782.72d1edfc.iframe.bundle.js","mappings":";;AAiCA;;;;ACwBA;;;;AAIA;AACA;;;;AArBA;;;;;;;;;;AAmCA;;;;ACuEA;AAGA;AClGA;;;;;;;AASA;AAUA;;;;;;AAMA;;;;AAIA;;;;AAMA;;;;;AAKA;AAGA;AACA;;;AAGA;AAGA;;AAEA;AACA;;AAEA;AACA;;;;;AAOA;;;;;;;;;AASA;AACA;AACA;;AAIA","sources":["webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/FilePicker/FilePicker.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the button width to 100% of the parent\n     * @deprecated\n     */\n    block?: boolean;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n/**\n * @deprecated\n */\nfunction handleBlockProp({ block }: BaseButtonProps): string {\n    if (block !== undefined) {\n        deprecatedProperty('Button', block, 'block', 'width');\n    }\n\n    if (block) {\n        return 'width: 100%';\n    }\n\n    return '';\n}\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n    ${handleBlockProp};\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import React, { ComponentPropsWithoutRef, FC, MouseEventHandler, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MarginProps } from 'styled-system';\nimport { Colors, MediaQueries } from '../../essentials';\nimport { CheckCircleOutlineIcon, ShareIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Button } from '../Button/Button';\nimport { Text } from '../Text/Text';\nimport { shrinkFileName } from './utils/format';\n\ninterface FilePickerProps extends MarginProps, ComponentPropsWithoutRef<'input'> {\n    /**\n     * Sets the name property of input element in the DOM.\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/name\n     */\n    name: string;\n    /**\n     * One or more unique file type identifiers describing\n     * files types to allow.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    accept?: string;\n    /**\n     * What source to use for capturing image or video data.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    capture?: boolean | 'user' | 'environment';\n    /**\n     * Text to provide a clear description of what the user should upload\n     */\n    label: string;\n    /**\n     * Text to display within component button, it describes the main action,\n     * it works better when short\n     */\n    buttonText: string;\n    /**\n     * Keep the action button displayed instead of showing the success state.\n     */\n    alwaysShowActionButton?: boolean;\n    /**\n     * Whether the component should render an error state\n     */\n    error?: boolean;\n    /**\n     * Callback to be used when the input receives a new file\n     */\n    onFileChange?: (file: File, event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst InputButton = styled(Button)`\n    font-size: ${get('fontSizes.1')};\n    line-height: 1;\n    font-weight: 400;\n    height: auto;\n    min-width: auto;\n    padding: 0.5rem 0.75rem;\n    white-space: nowrap;\n`;\n\nconst ICON_FILE_FEEDBACK_COLOR = Colors.POSITIVE_GREEN_900;\n\ninterface OutlinerProps extends BoxProps {\n    disabled: boolean;\n    error: boolean;\n    hasValidFile: boolean;\n}\n\n// NOTE: we want to affect the color of only one icon SVG and not the ICON_FILE_FEEDBACK_COLOR\nconst Outliner = styled(Box)<OutlinerProps>`\n    border: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    box-sizing: border-box;\n    cursor: pointer;\n    position: relative;\n    transition: background-color ease 200ms, border-color ease 200ms;\n\n    ${Text} {\n        cursor: pointer;\n    }\n\n    ${({ disabled }) =>\n        disabled &&\n        css`\n            opacity: 0.5;\n\n            &,\n            ${InputButton}, ${Text} {\n                cursor: not-allowed;\n            }\n        `}\n\n    ${({ error }) =>\n        error &&\n        css`\n            box-shadow: inset 0 0 0 0.0625rem ${Colors.NEGATIVE_ORANGE_900};\n            border-color: ${Colors.NEGATIVE_ORANGE_900};\n        `}\n\n    ${({ hasValidFile }) =>\n        hasValidFile &&\n        css`\n            ${MediaQueries.medium} {\n                &:hover {\n                    background-color: ${Colors.ACTION_BLUE_50};\n                    border-color: ${Colors.ACTION_BLUE_50};\n\n                    svg:not([color='${Colors.POSITIVE_GREEN_900}']) path {\n                        fill: ${Colors.ACTION_BLUE_900};\n                    }\n                }\n            }\n        `}\n`;\n\nconst Input = styled.input`\n    height: 100%;\n    left: 0;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n    outline: none;\n\n    &:focus + ${Outliner} {\n        border-color: ${Colors.ACTION_BLUE_900};\n        box-shadow: inset 0 0 0 0.0625rem ${Colors.ACTION_BLUE_900};\n    }\n`;\n\nconst FilePicker: FC<FilePickerProps> = ({\n    name,\n    accept = '*',\n    capture,\n    label,\n    buttonText,\n    error = false,\n    onFileChange = () => undefined,\n    onChange = () => undefined,\n    disabled = false,\n    alwaysShowActionButton = false,\n    ...nonInputProps\n}: FilePickerProps) => {\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [file, setFile] = useState<File | null>();\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const eventFile = e.target.files?.[0];\n\n        onChange(e);\n        onFileChange(eventFile, e);\n        setFile(eventFile);\n    };\n    const onClickHandler: MouseEventHandler = e => {\n        // Avoid label trigger file selection twice\n        e.preventDefault();\n        // Avoid button trigger file selection twice\n        e.stopPropagation();\n        // Allow other spaces of the component trigger file selection\n        inputEl.current.click();\n    };\n    const validFileSelected = file && !error;\n\n    return (\n        <Box position=\"relative\" {...nonInputProps}>\n            <Input\n                accept={accept}\n                capture={capture}\n                disabled={disabled}\n                id={name}\n                multiple={false}\n                name={name}\n                onChange={onInputChange}\n                ref={inputEl}\n                type=\"file\"\n            />\n            <Outliner\n                minHeight=\"5.125rem\"\n                alignItems=\"stretch\"\n                data-testid=\"filepicker-outliner\"\n                display=\"flex\"\n                disabled={disabled}\n                hasValidFile={validFileSelected}\n                error={error}\n                justifyContent=\"space-between\"\n                onClick={onClickHandler}\n                px={2}\n                py={validFileSelected ? '1.25rem' : 3}\n            >\n                <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" pr={2}>\n                    <Text as=\"label\" htmlFor={name} fontSize={1}>\n                        {label}\n                    </Text>\n                    <Text secondary fontSize={1}>\n                        {file && shrinkFileName(file)}\n                    </Text>\n                </Box>\n                <Box display={{ _: 'none', medium: 'flex' }} alignItems=\"center\" justifyContent=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleOutlineIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <InputButton variant=\"secondary\" type=\"button\" tabIndex={-1} onClick={onClickHandler}>\n                            {buttonText}\n                        </InputButton>\n                    )}\n                </Box>\n                <Box display={{ _: 'flex', medium: 'none' }} alignItems=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleOutlineIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <ShareIcon />\n                    )}\n                </Box>\n            </Outliner>\n        </Box>\n    );\n};\n\nexport { FilePicker, FilePickerProps };\n"],"names":[],"sourceRoot":""}