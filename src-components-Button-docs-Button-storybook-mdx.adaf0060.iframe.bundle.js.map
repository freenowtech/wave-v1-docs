{"version":3,"file":"src-components-Button-docs-Button-storybook-mdx.adaf0060.iframe.bundle.js","mappings":";;;;AAyDA;;;;AAIA;AACA;;;;AArBA;;;;;;;;;;AAmCA;;;;ACuEA;AAGA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the button width to 100% of the parent\n     * @deprecated\n     */\n    block?: boolean;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n/**\n * @deprecated\n */\nfunction handleBlockProp({ block }: BaseButtonProps): string {\n    if (block !== undefined) {\n        deprecatedProperty('Button', block, 'block', 'width');\n    }\n\n    if (block) {\n        return 'width: 100%';\n    }\n\n    return '';\n}\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n    ${handleBlockProp};\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n"],"names":[],"sourceRoot":""}