{"version":3,"file":"src-components-Tag-docs-Tag-storybook-mdx.c3328631.iframe.bundle.js","mappings":";;;AA4BA;AACA;AACA;;;AAKA;;;;;;;AASA;;;;;;;;;;;;AA8EA;AACA;AAGA","sources":["webpack://@freenow/wave/./src/components/Tag/Tag.tsx"],"sourcesContent":["import React, { FC, MouseEvent, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { margin, MarginProps, variant } from 'styled-system';\n\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { CloseIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { Text } from '../Text/Text';\n\ninterface TagProps extends MarginProps {\n    /**\n     * The function to handle when the dismiss icon is clicked\n     */\n    onDismiss?: (e: MouseEvent) => void;\n    /**\n     * The prop to determine whether the dismiss functionality is enabled\n     */\n    dismissible?: boolean;\n    /**\n     * Set the appropriate semantic tag color.\n     * @default default\n     */\n    variant?: 'default' | 'disabled' | 'error';\n}\n\nconst TagText = styled(Text).attrs({ theme })<Pick<TagProps, 'dismissible'>>`\n    margin-left: 0.75rem;\n    margin-right: ${props => (props.dismissible ? '0.25rem' : '0.75rem')};\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    cursor: default;\n    transition: color 125ms ease;\n`;\n\nconst DismissIcon = styled(CloseIcon).attrs({ size: 18 })`\n    margin-right: 0.5rem;\n    transition: color 125ms ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst tagVariant = variant({\n    variants: {\n        default: {\n            backgroundColor: get('semanticColors.background.info'),\n            borderColor: get('semanticColors.border.infoEmphasized'),\n\n            [`> ${TagText}`]: {\n                color: get('semanticColors.text.link')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: get('semanticColors.icon.action')\n            },\n\n            '&:hover': {\n                backgroundColor: get('semanticColors.background.infoEmphasized'),\n                borderColor: get('semanticColors.border.infoEmphasized'),\n\n                [`> ${TagText}`]: {\n                    color: get('semanticColors.text.primaryInverted')\n                },\n\n                [`> ${DismissIcon}`]: {\n                    color: get('semanticColors.icon.primaryInverted')\n                }\n            }\n        },\n        disabled: {\n            borderColor: get('semanticColors.border.primary'),\n\n            [`> ${TagText}`]: {\n                color: get('semanticColors.text.disabled')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: get('semanticColors.icon.disabled')\n            }\n        },\n        error: {\n            backgroundColor: get('semanticColors.background.danger'),\n            borderColor: get('semanticColors.border.dangerEmphasized'),\n\n            [`> ${TagText}`]: {\n                color: get('semanticColors.text.dangerInverted')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: get('semanticColors.icon.danger')\n            },\n\n            '&:hover': {\n                backgroundColor: get('semanticColors.background.dangerEmphasized'),\n                borderColor: get('semanticColors.border.dangerEmphasized'),\n\n                [`> ${TagText}`]: {\n                    color: get('semanticColors.text.primaryInverted')\n                },\n\n                [`> ${DismissIcon}`]: {\n                    color: get('semanticColors.icon.primaryInverted')\n                }\n            }\n        }\n    }\n});\n\nconst TagWrapper = styled.div.attrs({ theme })<TagProps>`\n    box-sizing: border-box;\n    border: solid 0.0625rem;\n    display: inline-flex;\n    align-items: center;\n    border-radius: 2rem;\n    height: 2rem;\n    margin-right: 0.25rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0;\n    transition: background-color 125ms ease;\n\n    ${margin}\n    ${tagVariant}\n`;\n\nconst Tag: FC<PropsWithChildren<TagProps>> = ({\n    children,\n    onDismiss,\n    dismissible = true,\n    variant: variantValue = 'default',\n    ...rest\n}) => (\n    <TagWrapper variant={variantValue} {...rest}>\n        <TagText dismissible={dismissible}>{children}</TagText>\n        {dismissible && <DismissIcon data-testid=\"dismiss-icon\" color={Colors.ACTION_BLUE_900} onClick={onDismiss} />}\n    </TagWrapper>\n);\n\nexport { Tag, TagProps };\n"],"names":[],"sourceRoot":""}