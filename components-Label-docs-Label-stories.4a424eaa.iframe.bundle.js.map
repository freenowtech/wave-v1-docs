{"version":3,"file":"components-Label-docs-Label-stories.4a424eaa.iframe.bundle.js","mappings":";;;;AAqFA;AACA;;;;;;AAMA;AAGA;AC9CA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Label/Label.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { Text } from '../Text/Text';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LabelProps extends ComponentPropsWithoutRef<'span'>, MarginProps {\n    /**\n     * Set the appropriate colors for the component with 'default' as a default\n     */\n    variant?: ResponsiveValue<'default' | 'info' | 'success' | 'warning' | 'danger'>;\n\n    /**\n     * Use the alternative version of the label for critical status and extra emphasis\n     * @default false\n     */\n    filled?: boolean;\n}\n\nconst normalVariantStyles = variant({\n    variants: {\n        default: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.AUTHENTIC_BLUE_200,\n            backgroundColor: Colors.AUTHENTIC_BLUE_50\n        },\n        info: {\n            color: Colors.ACTION_BLUE_900,\n            borderColor: Colors.ACTION_BLUE_350,\n            backgroundColor: Colors.ACTION_BLUE_50\n        },\n        success: {\n            color: Colors.POSITIVE_GREEN_1000,\n            borderColor: Colors.POSITIVE_GREEN_350,\n            backgroundColor: Colors.POSITIVE_GREEN_50\n        },\n        warning: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.ATTENTION_YELLOW_350,\n            backgroundColor: Colors.ATTENTION_YELLOW_50\n        },\n        danger: {\n            color: Colors.NEGATIVE_ORANGE_1000,\n            borderColor: Colors.NEGATIVE_ORANGE_350,\n            backgroundColor: Colors.NEGATIVE_ORANGE_50\n        }\n    }\n});\n\nconst filledVariantStyles = variant({\n    variants: {\n        default: {\n            color: Colors.WHITE,\n            borderColor: Colors.AUTHENTIC_BLUE_350,\n            backgroundColor: Colors.AUTHENTIC_BLUE_350\n        },\n        info: {\n            color: Colors.WHITE,\n            borderColor: Colors.ACTION_BLUE_900,\n            backgroundColor: Colors.ACTION_BLUE_900\n        },\n        success: {\n            color: Colors.WHITE,\n            borderColor: Colors.POSITIVE_GREEN_900,\n            backgroundColor: Colors.POSITIVE_GREEN_900\n        },\n        warning: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.ATTENTION_YELLOW_900,\n            backgroundColor: Colors.ATTENTION_YELLOW_900\n        },\n        danger: {\n            color: Colors.WHITE,\n            borderColor: Colors.NEGATIVE_ORANGE_900,\n            backgroundColor: Colors.NEGATIVE_ORANGE_900\n        }\n    }\n});\n\nconst Label = styled(Text).attrs({ theme })<LabelProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    font-size: 0.625rem;\n    border-radius: ${get('radii.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    padding: 0.1875rem 0.5rem;\n\n    border-width: 0.0625rem;\n    border-style: solid;\n\n    ${props => compose(props.filled ? filledVariantStyles : normalVariantStyles, margin)(props)}\n`;\n\nLabel.defaultProps = {\n    variant: 'default'\n};\n\nexport { Label, LabelProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}